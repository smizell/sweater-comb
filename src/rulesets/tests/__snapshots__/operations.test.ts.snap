// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`failing case 1: adding a camelCase when pascalCase is required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for header-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 2`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "header": "exampleParam",
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "headers",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/headers/exampleParam",
          "kind": "response-header",
        },
        "value": Object {
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for response-header: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 3`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "examplePropertyName",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "examplePropertyName",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/examplePropertyName",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "examplePropertyName",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "examplePropertyName is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for field: request body 'examplePropertyName'",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 4`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "examplePropertyName",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "examplePropertyName",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/examplePropertyName",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "examplePropertyName",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "examplePropertyName is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for field: response body 'examplePropertyName'",
    },
  ],
}
`;

exports[`failing case 1: adding a camelCase when pascalCase is required 5`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
        "value": Object {
          "in": "query",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have PascalCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not PascalCase",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: adding a required property 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "email",
          "required": true,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "email",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "email",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/email",
          "kind": "field",
        },
      },
      "condition": "not be required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected request body property to not be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added field: email",
    },
  ],
}
`;

exports[`failing case 1: adding required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "in": "query",
          "name": "exampleParam",
          "required": true,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected added query parameter to not be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: changing from optional to required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "in": "query",
            "name": "exampleParam",
            "required": true,
          },
          "before": Object {
            "in": "query",
            "name": "exampleParam",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not allow changing from optional to required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected query parameter to be not be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: changing optional to required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from optional to required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected body property to be optional",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: changing required to optional 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from required to optional",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected body property to be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: changing type 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "in": "query",
            "name": "exampleParam",
            "schema": Object {
              "type": "number",
            },
          },
          "before": Object {
            "in": "query",
            "name": "exampleParam",
            "schema": Object {
              "type": "string",
            },
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not change the type",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected query parameter to not change type",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated query-parameter: exampleParam",
    },
  ],
}
`;

exports[`failing case 1: changing type 2`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "number",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not allow changing types",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected property to not change type",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: changing type 3`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "number",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not allow changing types",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected property to not change type",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`failing case 1: removing operation 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "removed": Object {
          "before": Object {
            "method": "get",
            "pathPattern": "/example",
          },
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected operation to not be removed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed operation: GET /example",
    },
  ],
}
`;

exports[`failing case 1: removing property 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
        "removed": Object {
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected response property to not be removed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed field: name",
    },
  ],
}
`;

exports[`failing case 1: removing status code 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
          ],
          "jsonPath": "/paths/~1example/get/responses/200",
          "kind": "response",
        },
        "removed": Object {
          "before": Object {
            "description": "",
            "statusCode": "200",
          },
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected response to not be removed",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed response: 200",
    },
  ],
}
`;

exports[`failing case 2: adding a camelCase when Capital-Param-Case is required 1`] = `
Object {
  "passed": false,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have Capital-Param-Case name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "exampleParam is not Capital-Param-Case",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for header-parameter: exampleParam",
    },
  ],
}
`;

exports[`operation metadata summary fails if missing 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "tags": Array [
            "Example",
          ],
        },
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "condition": "have a summary",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-summary",
      "effectiveOnDate": undefined,
      "error": "must have a summary",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operation metadata summary passes if provided 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "I have a summary",
          "tags": Array [
            "Example",
          ],
        },
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "I have a summary",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "I have a summary",
          "tags": Array [
            "Example",
          ],
        },
      },
      "condition": "have a summary",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-summary",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operation metadata tags fail is not provided 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
        },
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
        },
      },
      "condition": "have tags",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#tags",
      "effectiveOnDate": undefined,
      "error": "expected undefined to exist",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operation metadata tags passes if > 1 tag provided 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "condition": "have tags",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#tags",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operation parameters fails adding put method 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.1.3",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "put",
        "pathPattern": "/example",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "put",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "put",
        ],
        "jsonPath": "/paths/~1example/put",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "put": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "put",
          "pathPattern": "/example",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "put",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "put",
          ],
          "jsonPath": "/paths/~1example/put",
          "kind": "operation",
        },
      },
      "condition": "not use put method",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "put is not allowed in JSON:API",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: PUT /example",
    },
  ],
}
`;

exports[`operation parameters names allows adding a required query parameter to a new operation 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.1.3",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/example",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
    Object {
      "added": Object {
        "in": "query",
        "name": "query_parameter",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "query_parameter",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
          "parameters",
          "query",
          "query_parameter",
        ],
        "jsonPath": "/paths/~1example/get/parameters/0",
        "kind": "query-parameter",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "Empty",
      "version": "0.0.0",
    },
    "openapi": "3.1.3",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
              "required": true,
            },
          ],
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "in": "query",
          "name": "query_parameter",
          "required": true,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "query_parameter",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "query_parameter",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added query-parameter: query_parameter",
    },
  ],
}
`;

exports[`operation parameters names fails if the case isn't correct 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/example/{pathParameter}",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example/{pathParameter}",
        },
        "conceptualPath": Array [
          "operations",
          "/example/{}",
          "get",
        ],
        "jsonPath": "/paths/~1example~1{pathParameter}/get",
        "kind": "operation",
      },
    },
    Object {
      "added": Object {
        "in": "path",
        "name": "pathParameter",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "pathParameter",
          },
          "method": "get",
          "path": "/example/{pathParameter}",
        },
        "conceptualPath": Array [
          "operations",
          "/example/{}",
          "get",
          "parameters",
          "path",
          "pathParameter",
        ],
        "jsonPath": "/paths/~1example~1{pathParameter}/get/parameters/0",
        "kind": "path-parameter",
      },
    },
    Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
      "removed": Object {
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example/{pathParameter}": Object {
        "get": Object {
          "parameters": Array [
            Object {
              "in": "path",
              "name": "pathParameter",
            },
          ],
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/example/{pathParameter}",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example/{pathParameter}",
          },
          "conceptualPath": Array [
            "operations",
            "/example/{}",
            "get",
          ],
          "jsonPath": "/paths/~1example~1{pathParameter}/get",
          "kind": "operation",
        },
      },
      "condition": "use the correct case",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#parameter-names-and-path-components",
      "effectiveOnDate": undefined,
      "error": "expected parameter name \\"pathParameter\\" to be snake_case (path_parameter): expected false to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: GET /example/{pathParameter}",
    },
  ],
}
`;

exports[`operation parameters names fails if the default value is changed 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
              "schema": Object {
                "default": "before",
                "type": "string",
              },
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "query",
          "name": "query_parameter",
          "schema": Object {
            "default": "after",
            "type": "string",
          },
        },
        "before": Object {
          "in": "query",
          "name": "query_parameter",
          "schema": Object {
            "default": "before",
            "type": "string",
          },
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "query_parameter",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
          "parameters",
          "query",
          "query_parameter",
        ],
        "jsonPath": "/paths/~1example/get/parameters/0",
        "kind": "query-parameter",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
              "schema": Object {
                "default": "after",
                "type": "string",
              },
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "in": "query",
            "name": "query_parameter",
            "schema": Object {
              "default": "after",
              "type": "string",
            },
          },
          "before": Object {
            "in": "query",
            "name": "query_parameter",
            "schema": Object {
              "default": "before",
              "type": "string",
            },
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "query_parameter",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "query_parameter",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not change the default value",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#breaking-changes",
      "effectiveOnDate": undefined,
      "error": "expected 'before' to equal 'after'",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated query-parameter: query_parameter",
    },
  ],
}
`;

exports[`operation parameters names fails when adding a required query parameter 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "added": Object {
        "in": "query",
        "name": "query_parameter",
        "required": true,
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "query_parameter",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
          "parameters",
          "query",
          "query_parameter",
        ],
        "jsonPath": "/paths/~1example/get/parameters/0",
        "kind": "query-parameter",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
              "required": true,
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "in": "query",
          "name": "query_parameter",
          "required": true,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "query_parameter",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "query_parameter",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be required",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#breaking-changes",
      "effectiveOnDate": undefined,
      "error": "expected request query parameter query_parameter to not be required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added query-parameter: query_parameter",
    },
  ],
}
`;

exports[`operation parameters names fails when changing optional to required query parameter 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "in": "query",
          "name": "query_parameter",
          "required": true,
        },
        "before": Object {
          "in": "query",
          "name": "query_parameter",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "query": "query_parameter",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
          "parameters",
          "query",
          "query_parameter",
        ],
        "jsonPath": "/paths/~1example/get/parameters/0",
        "kind": "query-parameter",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "parameters": Array [
            Object {
              "in": "query",
              "name": "query_parameter",
              "required": true,
            },
          ],
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "in": "query",
            "name": "query_parameter",
            "required": true,
          },
          "before": Object {
            "in": "query",
            "name": "query_parameter",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "query_parameter",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "query_parameter",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be optional then required",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#breaking-changes",
      "effectiveOnDate": undefined,
      "error": "expected request query parameter query_parameter to not change from optional to required",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated query-parameter: query_parameter",
    },
  ],
}
`;

exports[`operation parameters names passes if the case is correct 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/example/{path_parameter}",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example/{path_parameter}",
        },
        "conceptualPath": Array [
          "operations",
          "/example/{}",
          "get",
        ],
        "jsonPath": "/paths/~1example~1{path_parameter}/get",
        "kind": "operation",
      },
    },
    Object {
      "added": Object {
        "in": "path",
        "name": "path_parameter",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "inRequest": Object {
            "path": "path_parameter",
          },
          "method": "get",
          "path": "/example/{path_parameter}",
        },
        "conceptualPath": Array [
          "operations",
          "/example/{}",
          "get",
          "parameters",
          "path",
          "path_parameter",
        ],
        "jsonPath": "/paths/~1example~1{path_parameter}/get/parameters/0",
        "kind": "path-parameter",
      },
    },
    Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
      "removed": Object {
        "before": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example/{path_parameter}": Object {
        "get": Object {
          "parameters": Array [
            Object {
              "in": "path",
              "name": "path_parameter",
            },
          ],
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/example/{path_parameter}",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example/{path_parameter}",
          },
          "conceptualPath": Array [
            "operations",
            "/example/{}",
            "get",
          ],
          "jsonPath": "/paths/~1example~1{path_parameter}/get",
          "kind": "operation",
        },
      },
      "condition": "use the correct case",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#parameter-names-and-path-components",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added operation: GET /example/{path_parameter}",
    },
  ],
}
`;

exports[`operation parameters status codes fails when a status codes is removed 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {
            "200": Object {
              "description": "Example response",
            },
          },
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "removed",
      "location": Object {
        "conceptualLocation": Object {
          "inResponse": Object {
            "statusCode": "200",
          },
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
          "responses",
          "200",
        ],
        "jsonPath": "/paths/~1example/get/responses/200",
        "kind": "response",
      },
      "removed": Object {
        "before": Object {
          "description": "Example response",
          "statusCode": "200",
        },
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "removed",
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
          ],
          "jsonPath": "/paths/~1example/get/responses/200",
          "kind": "response",
        },
        "removed": Object {
          "before": Object {
            "description": "Example response",
            "statusCode": "200",
          },
        },
      },
      "condition": "not be removed",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#breaking-changes",
      "effectiveOnDate": undefined,
      "error": "expected get /example 200 to be present",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "removed response: 200",
    },
  ],
}
`;

exports[`operation parameters version parameter fails when there is no version parameter 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "changelog": Array [],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getExample",
          "responses": Object {},
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "operationId": "getExample",
          "pathPattern": "/example",
          "summary": "Retrieve example",
          "tags": Array [
            "Example",
          ],
        },
      },
      "condition": "include a version parameter",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/version.md#how-are-versions-accessed-and-resolved-by-consumers",
      "effectiveOnDate": undefined,
      "error": "expected [] to include 'version'",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operationId fails if changed 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "example",
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "example2",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "operationId": "example",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "example2",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "method": "get",
            "operationId": "example2",
            "pathPattern": "/example",
          },
          "before": Object {
            "method": "get",
            "operationId": "example",
            "pathPattern": "/example",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
      },
      "condition": "have consistent operation IDs",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected 'example' to equal 'example2'",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated operation: GET /example",
    },
  ],
}
`;

exports[`operationId fails if removed 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "example",
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "operationId": "example",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "method": "get",
            "pathPattern": "/example",
          },
          "before": Object {
            "method": "get",
            "operationId": "example",
            "pathPattern": "/example",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
      },
      "condition": "have consistent operation IDs",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "error": "expected 'example' to equal undefined",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated operation: GET /example",
    },
  ],
}
`;

exports[`operationId fails when camel case and valid prefix but no suffix 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "get",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "get",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "method": "get",
            "operationId": "get",
            "pathPattern": "/example",
          },
          "before": Object {
            "method": "get",
            "pathPattern": "/example",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-ids",
      "effectiveOnDate": 2021-07-01T00:00:00.000Z,
      "error": "operationId \\"get\\" must be camelCase (get) and start with get|create|list|update|delete: expected false to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated operation: GET /example",
    },
  ],
}
`;

exports[`operationId missing fails if empty string 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "method": "get",
            "operationId": "",
            "pathPattern": "/example",
          },
          "before": Object {
            "method": "get",
            "pathPattern": "/example",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-ids",
      "effectiveOnDate": 2021-07-01T00:00:00.000Z,
      "error": "expected '' to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated operation: GET /example",
    },
  ],
}
`;

exports[`operationId missing fails if undefined 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
        "value": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "condition": "have operationId",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-ids",
      "effectiveOnDate": undefined,
      "error": "no operationId provided",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "requirement for operation: GET /example",
    },
  ],
}
`;

exports[`operationId passes when camel case and has a hump 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "getYesHump",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "getYesHump",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "method": "get",
            "operationId": "getYesHump",
            "pathPattern": "/example",
          },
          "before": Object {
            "method": "get",
            "pathPattern": "/example",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-ids",
      "effectiveOnDate": 2021-07-01T00:00:00.000Z,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "updated operation: GET /example",
    },
  ],
}
`;

exports[`operationId when set fails if not camel case 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "get-hello-world",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "get-hello-world",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "method": "get",
            "operationId": "get-hello-world",
            "pathPattern": "/example",
          },
          "before": Object {
            "method": "get",
            "pathPattern": "/example",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-ids",
      "effectiveOnDate": 2021-07-01T00:00:00.000Z,
      "error": "operationId \\"get-hello-world\\" must be camelCase (getHelloWorld) and start with get|create|list|update|delete: expected false to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated operation: GET /example",
    },
  ],
}
`;

exports[`operationId when set fails if prefix is wrong 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "changelog": Array [
    Object {
      "changeType": "changed",
      "changed": Object {
        "after": Object {
          "method": "get",
          "operationId": "findHelloWorld",
          "pathPattern": "/example",
        },
        "before": Object {
          "method": "get",
          "pathPattern": "/example",
        },
      },
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/example",
        },
        "conceptualPath": Array [
          "operations",
          "/example",
          "get",
        ],
        "jsonPath": "/paths/~1example/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/example": Object {
        "get": Object {
          "operationId": "findHelloWorld",
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "method": "get",
            "operationId": "findHelloWorld",
            "pathPattern": "/example",
          },
          "before": Object {
            "method": "get",
            "pathPattern": "/example",
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
          ],
          "jsonPath": "/paths/~1example/get",
          "kind": "operation",
        },
      },
      "condition": "have the correct operationId format",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#operation-ids",
      "effectiveOnDate": 2021-07-01T00:00:00.000Z,
      "error": "operationId \\"findHelloWorld\\" must be camelCase (findHelloWorld) and start with get|create|list|update|delete: expected false to be truthy",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "updated operation: GET /example",
    },
  ],
}
`;

exports[`orgOrGroupTenant fails with both valid and invalid group tenants 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/groups/{group_id}/thing",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/groups/{group_id}/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/groups/{}/thing",
          "get",
        ],
        "jsonPath": "/paths/~1groups~1{group_id}~1thing/get",
        "kind": "operation",
      },
    },
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/bad-lieu-tenant",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/bad-lieu-tenant",
        },
        "conceptualPath": Array [
          "operations",
          "/bad-lieu-tenant",
          "get",
        ],
        "jsonPath": "/paths/~1bad-lieu-tenant/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/bad-lieu-tenant": Object {
        "get": Object {
          "responses": Object {},
        },
      },
      "/groups/{group_id}/thing": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/groups/{group_id}/thing",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/groups/{group_id}/thing",
          },
          "conceptualPath": Array [
            "operations",
            "/groups/{}/thing",
            "get",
          ],
          "jsonPath": "/paths/~1groups~1{group_id}~1thing/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added operation: GET /groups/{group_id}/thing",
    },
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/bad-lieu-tenant",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/bad-lieu-tenant",
          },
          "conceptualPath": Array [
            "operations",
            "/bad-lieu-tenant",
            "get",
          ],
          "jsonPath": "/paths/~1bad-lieu-tenant/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "error": "expected support for org or group tenant in /bad-lieu-tenant",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: GET /bad-lieu-tenant",
    },
  ],
}
`;

exports[`orgOrGroupTenant fails with both valid and invalid org tenants 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/orgs/{org_id}/thing",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/orgs/{org_id}/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/thing",
          "get",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1thing/get",
        "kind": "operation",
      },
    },
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/bad-lieu-tenant",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/bad-lieu-tenant",
        },
        "conceptualPath": Array [
          "operations",
          "/bad-lieu-tenant",
          "get",
        ],
        "jsonPath": "/paths/~1bad-lieu-tenant/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/bad-lieu-tenant": Object {
        "get": Object {
          "responses": Object {},
        },
      },
      "/orgs/{org_id}/thing": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/orgs/{org_id}/thing",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/orgs/{org_id}/thing",
          },
          "conceptualPath": Array [
            "operations",
            "/orgs/{}/thing",
            "get",
          ],
          "jsonPath": "/paths/~1orgs~1{org_id}~1thing/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added operation: GET /orgs/{org_id}/thing",
    },
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/bad-lieu-tenant",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/bad-lieu-tenant",
          },
          "conceptualPath": Array [
            "operations",
            "/bad-lieu-tenant",
            "get",
          ],
          "jsonPath": "/paths/~1bad-lieu-tenant/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "error": "expected support for org or group tenant in /bad-lieu-tenant",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: GET /bad-lieu-tenant",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '' is valid: false 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "",
        },
        "conceptualPath": Array [
          "operations",
          "",
          "get",
        ],
        "jsonPath": "/paths//get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "",
          },
          "conceptualPath": Array [
            "operations",
            "",
            "get",
          ],
          "jsonPath": "/paths//get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "error": "expected support for org or group tenant in ",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: GET ",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/group/{group_id}' is valid: false 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/group/{group_id}",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/group/{group_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/group/{}",
          "get",
        ],
        "jsonPath": "/paths/~1group~1{group_id}/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/group/{group_id}": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/group/{group_id}",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/group/{group_id}",
          },
          "conceptualPath": Array [
            "operations",
            "/group/{}",
            "get",
          ],
          "jsonPath": "/paths/~1group~1{group_id}/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "error": "expected support for org or group tenant in /group/{group_id}",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: GET /group/{group_id}",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/groups' is valid: true 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/groups",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/groups",
        },
        "conceptualPath": Array [
          "operations",
          "/groups",
          "get",
        ],
        "jsonPath": "/paths/~1groups/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/groups": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/groups",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/groups",
          },
          "conceptualPath": Array [
            "operations",
            "/groups",
            "get",
          ],
          "jsonPath": "/paths/~1groups/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added operation: GET /groups",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/groups/{group_id}/thing' is valid: true 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/groups/{group_id}/thing",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/groups/{group_id}/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/groups/{}/thing",
          "get",
        ],
        "jsonPath": "/paths/~1groups~1{group_id}~1thing/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/groups/{group_id}/thing": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/groups/{group_id}/thing",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/groups/{group_id}/thing",
          },
          "conceptualPath": Array [
            "operations",
            "/groups/{}/thing",
            "get",
          ],
          "jsonPath": "/paths/~1groups~1{group_id}~1thing/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added operation: GET /groups/{group_id}/thing",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/groups/thing' is valid: false 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/groups/thing",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/groups/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/groups/thing",
          "get",
        ],
        "jsonPath": "/paths/~1groups~1thing/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/groups/thing": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/groups/thing",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/groups/thing",
          },
          "conceptualPath": Array [
            "operations",
            "/groups/thing",
            "get",
          ],
          "jsonPath": "/paths/~1groups~1thing/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "error": "expected support for org or group tenant in /groups/thing",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: GET /groups/thing",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/org/{org_id}' is valid: false 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/org/{org_id}",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/org/{org_id}",
        },
        "conceptualPath": Array [
          "operations",
          "/org/{}",
          "get",
        ],
        "jsonPath": "/paths/~1org~1{org_id}/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/org/{org_id}": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/org/{org_id}",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/org/{org_id}",
          },
          "conceptualPath": Array [
            "operations",
            "/org/{}",
            "get",
          ],
          "jsonPath": "/paths/~1org~1{org_id}/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "error": "expected support for org or group tenant in /org/{org_id}",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: GET /org/{org_id}",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/orgs' is valid: true 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/orgs",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/orgs",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs",
          "get",
        ],
        "jsonPath": "/paths/~1orgs/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/orgs": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/orgs",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/orgs",
          },
          "conceptualPath": Array [
            "operations",
            "/orgs",
            "get",
          ],
          "jsonPath": "/paths/~1orgs/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added operation: GET /orgs",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/orgs/{org_id}/thing' is valid: true 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/orgs/{org_id}/thing",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/orgs/{org_id}/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/{}/thing",
          "get",
        ],
        "jsonPath": "/paths/~1orgs~1{org_id}~1thing/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/orgs/{org_id}/thing": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/orgs/{org_id}/thing",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/orgs/{org_id}/thing",
          },
          "conceptualPath": Array [
            "operations",
            "/orgs/{}/thing",
            "get",
          ],
          "jsonPath": "/paths/~1orgs~1{org_id}~1thing/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added operation: GET /orgs/{org_id}/thing",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/orgs/thing' is valid: false 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/orgs/thing",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/orgs/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/orgs/thing",
          "get",
        ],
        "jsonPath": "/paths/~1orgs~1thing/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/orgs/thing": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/orgs/thing",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/orgs/thing",
          },
          "conceptualPath": Array [
            "operations",
            "/orgs/thing",
            "get",
          ],
          "jsonPath": "/paths/~1orgs~1thing/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "error": "expected support for org or group tenant in /orgs/thing",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: GET /orgs/thing",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/self' is valid: true 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/self",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/self",
        },
        "conceptualPath": Array [
          "operations",
          "/self",
          "get",
        ],
        "jsonPath": "/paths/~1self/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/self": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/self",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/self",
          },
          "conceptualPath": Array [
            "operations",
            "/self",
            "get",
          ],
          "jsonPath": "/paths/~1self/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added operation: GET /self",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/self/thing' is valid: false 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/self/thing",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/self/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/self/thing",
          "get",
        ],
        "jsonPath": "/paths/~1self~1thing/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/self/thing": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/self/thing",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/self/thing",
          },
          "conceptualPath": Array [
            "operations",
            "/self/thing",
            "get",
          ],
          "jsonPath": "/paths/~1self~1thing/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "error": "expected support for org or group tenant in /self/thing",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: GET /self/thing",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/test' is valid: true 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/test",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/test",
        },
        "conceptualPath": Array [
          "operations",
          "/test",
          "get",
        ],
        "jsonPath": "/paths/~1test/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/test": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/test",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/test",
          },
          "conceptualPath": Array [
            "operations",
            "/test",
            "get",
          ],
          "jsonPath": "/paths/~1test/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added operation: GET /test",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/test/docker/golang:1.18' is valid: true 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/test/docker/golang:1.18",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/test/docker/golang:1.18",
        },
        "conceptualPath": Array [
          "operations",
          "/test/docker/golang:1.18",
          "get",
        ],
        "jsonPath": "/paths/~1test~1docker~1golang:1.18/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/test/docker/golang:1.18": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/test/docker/golang:1.18",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/test/docker/golang:1.18",
          },
          "conceptualPath": Array [
            "operations",
            "/test/docker/golang:1.18",
            "get",
          ],
          "jsonPath": "/paths/~1test~1docker~1golang:1.18/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added operation: GET /test/docker/golang:1.18",
    },
  ],
}
`;

exports[`orgOrGroupTenant path '/thing' is valid: false 1`] = `
Object {
  "base": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {},
  },
  "changelog": Array [
    Object {
      "added": Object {
        "method": "get",
        "pathPattern": "/thing",
      },
      "changeType": "added",
      "location": Object {
        "conceptualLocation": Object {
          "method": "get",
          "path": "/thing",
        },
        "conceptualPath": Array [
          "operations",
          "/thing",
          "get",
        ],
        "jsonPath": "/paths/~1thing/get",
        "kind": "operation",
      },
    },
  ],
  "next": Object {
    "info": Object {
      "title": "OpenAPI",
      "version": "0.0.0",
    },
    "openapi": "3.0.1",
    "paths": Object {
      "/thing": Object {
        "get": Object {
          "responses": Object {},
        },
      },
    },
  },
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "method": "get",
          "pathPattern": "/thing",
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "method": "get",
            "path": "/thing",
          },
          "conceptualPath": Array [
            "operations",
            "/thing",
            "get",
          ],
          "jsonPath": "/paths/~1thing/get",
          "kind": "operation",
        },
      },
      "condition": "have an org or group tenant",
      "docsLink": "https://github.com/snyk/sweater-comb/blob/main/docs/standards.md#organization-and-group-tenants-for-resources",
      "effectiveOnDate": undefined,
      "error": "expected support for org or group tenant in /thing",
      "isMust": true,
      "isShould": false,
      "passed": false,
      "where": "added operation: GET /thing",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for header-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 2`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "header": "exampleParam",
              "statusCode": "200",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "headers",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/headers/exampleParam",
          "kind": "response-header",
        },
        "value": Object {
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for response-header: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 3`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "camelCase",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "camelCase",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/camelCase",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "camelCase",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for field: request body 'camelCase'",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 4`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "camelCase",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "camelCase",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/camelCase",
          "kind": "field",
        },
        "value": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "camelCase",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for field: response body 'camelCase'",
    },
  ],
}
`;

exports[`passing case 1: adding a camelCase when camelCase is required 5`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
        "value": Object {
          "in": "query",
          "name": "exampleParam",
          "required": false,
        },
      },
      "condition": "have camelCase name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for query-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: adding an optional property 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "flatSchema": Object {
            "type": "string",
          },
          "key": "email",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "email",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "email",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/email",
          "kind": "field",
        },
      },
      "condition": "not be required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added field: email",
    },
  ],
}
`;

exports[`passing case 1: adding optional 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "added": Object {
          "in": "query",
          "name": "exampleParam",
          "required": false,
        },
        "changeType": "added",
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "query": "exampleParam",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "query",
            "exampleParam",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "query-parameter",
        },
      },
      "condition": "not be allowed",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "added query-parameter: exampleParam",
    },
  ],
}
`;

exports[`passing case 1: changing optional to required 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inResponse": Object {
              "body": Object {
                "contentType": "application/json",
              },
              "statusCode": "200",
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "responses",
            "200",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/get/responses/200/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from required to optional",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`passing case 1: changing required to optional 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "changeType": "changed",
        "changed": Object {
          "after": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": false,
          },
          "before": Object {
            "flatSchema": Object {
              "type": "string",
            },
            "key": "name",
            "required": true,
          },
        },
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "body": Object {
                "contentType": "application/json",
              },
            },
            "jsonSchemaTrail": Array [
              "name",
            ],
            "method": "post",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "post",
            "application/json",
            "name",
          ],
          "jsonPath": "/paths/~1example/post/requestBody/content/application~1json/schema/properties/name",
          "kind": "field",
        },
      },
      "condition": "not change from optional to required",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "updated field: name",
    },
  ],
}
`;

exports[`passing case 2: wrong case ok if it is already there 1`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 2`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 3`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 4`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 2: wrong case ok if it is already there 5`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;

exports[`passing case 3: adding a Capital-Param-Case when Capital-Param-Case is required 1`] = `
Object {
  "passed": true,
  "results": Array [
    Object {
      "change": Object {
        "location": Object {
          "conceptualLocation": Object {
            "inRequest": Object {
              "header": "Example-Header",
            },
            "method": "get",
            "path": "/example",
          },
          "conceptualPath": Array [
            "operations",
            "/example",
            "get",
            "parameters",
            "header",
            "Example-Header",
          ],
          "jsonPath": "/paths/~1example/get/parameters/0",
          "kind": "header-parameter",
        },
        "value": Object {
          "in": "header",
          "name": "Example-Header",
          "required": false,
        },
      },
      "condition": "have Capital-Param-Case name",
      "docsLink": undefined,
      "effectiveOnDate": undefined,
      "isMust": true,
      "isShould": false,
      "passed": true,
      "where": "requirement for header-parameter: Example-Header",
    },
  ],
}
`;

exports[`passing case 4: wrong case ok if it is already there 1`] = `
Object {
  "passed": true,
  "results": Array [],
}
`;
